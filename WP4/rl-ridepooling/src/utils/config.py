from omegaconf import OmegaConf
from pathlib import Path
from datetime import datetime

class Config:
    """
    Configuration management class designed to handle the integration of command-line arguments and 
    external YAML configuration files into a single configuration object accessible throughout the program.

    This class uses the `OmegaConf` library to parse and merge command line arguments and configurations from 
    a YAML file. Command line arguments are prioritized over the settings in the YAML file.

    Attributes:
        opt (OmegaConf): A configuration object that combines command line arguments and settings loaded from a YAML file.
        prefix (str): The base name of the configuration file used (if any), used as a part of the naming convention for output directories.
        output_dir_name (str): A directory name generated by combining the current date and time with `prefix`. This directory is meant for output files generated during the program's execution.

    Args:
        parser (argparse.ArgumentParser): A parser instance pre-configured with the expected command line arguments.

    Examples:
        Suppose you initialize this class with an `argparse.ArgumentParser` which has been configured with
        a `config` argument pointing to a YAML file. The `Config` class will read this file, integrate it
        with any command line arguments provided, and make this consolidated configuration accessible through
        the `opt` attribute.
    """
    def __init__(self, parser):
        # Parse default values
        defaults = {action.dest: action.default for action in parser._actions}

        # Parse arguments from command line
        cmd_args = parser.parse_args()

        # Determine which arguments were explicitly set by the user
        specified_args = {arg: value for arg, value in vars(cmd_args).items() if arg != 'config' and value != defaults[arg]}

        # Read config from YAML file if specified
        if cmd_args.config:
            config = OmegaConf.load(cmd_args.config)
            # Convert specified command-line arguments into an OmegaConf dictionary
            specified_args_conf = OmegaConf.create(specified_args)
            # Merge config with the command line arguments (command line arguments take precedence)
            self.opt = OmegaConf.merge(config, specified_args_conf)
        else:
            # If no config file, use command line arguments directly
            self.opt = OmegaConf.create(vars(cmd_args))

        now = datetime.now().strftime('%Y-%m-%dT%H-%M-%S')
        
        # define prefix and output dir name
        self.prefix = Path(cmd_args.config).stem if cmd_args.config else None
        self.output_dir_name = f'{now}_{self.prefix}' if self.prefix else f'{now}' 

